services:
  app:
    build: .
    container_name: "app"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    command:  ["sh", "-c", "uvicorn app.main:init_app --reload --host ${HOST} --port ${PORT}"]
    networks:
      - app-network

  db:
    image: postgres:16.3-alpine
    container_name: "db"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  redis:
    image: redis:7.2-alpine
    container_name: "redis"
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - app-network

  queue_worker:
    build: .
    container_name: "queue_worker"
    volumes:
      - .:/app
    env_file:
      - .env
    command: taskiq worker app.tasks:broker
    networks:
      - app-network

  scheduler:
    build: .
    container_name: "scheduler"
    volumes:
      - .:/app
    command: taskiq scheduler app.tasks:scheduler
    env_file:
      - .env
    networks:
      - app-network

  kafka:
    image: apache/kafka:4.0.0
    container_name: "kafka"
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: "1"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"

      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"

      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092 2>/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12

  migrations:
    build: .
    entrypoint: ["/bin/sh", "-c"]
    command:
      - >
        alembic upgrade head &&
        echo "✅  Миграции успешно применены!"
    volumes:
      - .:/app
    depends_on:
      - db
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - app-network

volumes:
  postgres_data:
  redis-data:
  kafka-data:


networks:
  app-network:
    external: true
